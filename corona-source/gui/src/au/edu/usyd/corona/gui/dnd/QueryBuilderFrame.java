package au.edu.usyd.corona.gui.dnd;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;

import au.edu.usyd.corona.gui.GUIManager;
import au.edu.usyd.corona.gui.util.DrawingConstants;

@SuppressWarnings("serial")
public class QueryBuilderFrame extends JFrame implements DrawingConstants {
	public static final int PANEL_WIDTH = 980;
	public static final int PANEL_HEIGHT = 650;
	
	private final InstructionsPanel instructionsPanel;
	private final SelectPanel selectPanel;
	private final WherePanel wherePanel;
	private final GroupByPanel groupByPanel;
	private final HavingPanel havingPanel;
	private final PropertiesPanel propertiesPanel;
	private final QueryDisplayPanel queryPanel;
	
	private final SQLFragmentGenerator[] generators;
	
	private String sql = "";
	
	public QueryBuilderFrame() {
		// setup
		setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		}
		catch (Exception e) {
		}
		
		setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		setTitle("Query Builder");
		setResizable(false);
		
		// inits all the panels
		instructionsPanel = new InstructionsPanel(PANEL_WIDTH, PANEL_HEIGHT);
		selectPanel = new SelectPanel(PANEL_WIDTH, PANEL_HEIGHT);
		wherePanel = new WherePanel(PANEL_WIDTH, PANEL_HEIGHT);
		groupByPanel = new GroupByPanel(PANEL_WIDTH, PANEL_HEIGHT);
		havingPanel = new HavingPanel(PANEL_WIDTH, PANEL_HEIGHT);
		propertiesPanel = new PropertiesPanel(PANEL_WIDTH, PANEL_HEIGHT);
		
		// sets up the sql generators list
		generators = new SQLFragmentGenerator[]{selectPanel, wherePanel, groupByPanel, havingPanel, propertiesPanel};
		
		// sets up the sql fragment listener across all the panels
		SQLFragmentListener listener = new PanelSQLFragmentListener();
		for (SQLFragmentGenerator x : generators)
			x.subscribeSQLFragmentGeneratorListener(listener);
		
		// setup tabs
		JTabbedPane tabbedPane = new JTabbedPane();
		tabbedPane.addTab("Instructions", instructionsPanel);
		tabbedPane.addTab("Select Data", selectPanel);
		tabbedPane.addTab("Set Conditions For Data", wherePanel);
		tabbedPane.addTab("Group Data", groupByPanel);
		tabbedPane.addTab("Set Conditions For Groups", havingPanel);
		tabbedPane.addTab("Query Run Properties", propertiesPanel);
		add(tabbedPane);
		
		// create the query panel
		queryPanel = new QueryDisplayPanel(new CloseButtonActionListner(this));
		add(queryPanel);
		
		// initial update of query panel
		listener.actUponChange(null);
		
		// ready to show the world
		pack();
		GUIManager.getInstance().registerFrame(this);
	}
	
	/**
	 * @return the SQL query generated by the query builder
	 */
	public String getSQL() {
		return sql;
	}
	
	/**
	 * The action listener used by the "close window" button
	 */
	private class CloseButtonActionListner implements ActionListener {
		private final QueryBuilderFrame qb;
		
		public CloseButtonActionListner(QueryBuilderFrame qb) {
			this.qb = qb;
		}
		
		public void actionPerformed(ActionEvent e) {
			qb.setVisible(false);
			WindowEvent we = new WindowEvent(qb, WindowEvent.WINDOW_CLOSING);
			for (WindowListener l : qb.getWindowListeners())
				l.windowClosing(we);
		}
	}
	
	/**
	 * The SQL fragment listener assigend to each tabbed panel in the query
	 * builder
	 */
	private class PanelSQLFragmentListener implements SQLFragmentListener {
		public void actUponChange(SQLFragmentGenerator generator) {
			StringBuffer query = new StringBuffer();
			for (SQLFragmentGenerator x : generators) {
				String s = x.getSQLFragment();
				if (s != null && s.length() != 0) {
					query.append(s);
					query.append('\n');
				}
			}
			sql = query.toString();
			queryPanel.setQuery(sql.replace('\n', ' '));
		}
	}
}
